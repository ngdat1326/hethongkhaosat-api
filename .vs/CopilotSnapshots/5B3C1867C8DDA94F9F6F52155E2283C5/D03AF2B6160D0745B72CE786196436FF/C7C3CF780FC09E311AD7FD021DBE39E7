using api.Data;
using System;
using System.Data;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using ClosedXML.Excel;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using api.Models;

namespace api.Report
{
    public class SurveyExcelExporter
    {
        private readonly ApplicationDbContext _context;
        private readonly string _connectionString;

        public SurveyExcelExporter(ApplicationDbContext context)
        {
            _context = context;
            _connectionString = _context.Database.GetDbConnection().ConnectionString;
        }

        public MemoryStream ExportSurveyResponsesToExcel(int surveyId)
        {
            var dt = GetSurveyResponsesDataTable(surveyId);
            // Lấy danh sách câu hỏi rating
            var ratingQuestions = _context.Questions.Include(q => q.QuestionType)
                .Where(q => q.SurveyId == surveyId && (q.QuestionType.Code == "rating" || q.QuestionType.Name.ToLower().Contains("hài lòng") || q.QuestionType.Name.ToLower().Contains("thang điểm")))
                .Select(q => q.Content)
                .ToHashSet();

            var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("SurveyResponses");
            worksheet.Cell(1, 1).InsertTable(dt, "Responses", true);
            worksheet.Columns().AdjustToContents();
            worksheet.RangeUsed().Style.Font.FontName = "Arial";
            worksheet.Row(1).Style.Font.Bold = true;
            worksheet.Row(1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Columns().Style.Alignment.WrapText = true;
            int dateColIndex = dt.Columns["Ngày gửi"] != null ? dt.Columns["Ngày gửi"].Ordinal + 1 : 2;
            worksheet.Column(dateColIndex).Width = 22;

            // Chuyển đổi giá trị rating sau khi đã insert table
            int questionCol = dt.Columns["Câu hỏi"]?.Ordinal ?? -1;
            int answerCol = dt.Columns["Trả lời"]?.Ordinal ?? -1;
            if (questionCol >= 0 && answerCol >= 0)
            {
                for (int row = 2; row <= dt.Rows.Count + 1; row++) // Bỏ header
                {
                    var question = worksheet.Cell(row, questionCol + 1).GetString();
                    var value = worksheet.Cell(row, answerCol + 1).GetString();
                    if (ratingQuestions.Contains(question))
                    {
                        switch (value)
                        {
                            case "1": value = "1 – Không sử dụng"; break;
                            case "2": value = "2 – Rất không hài lòng (hoặc: Rất kém)"; break;
                            case "3": value = "3 – Không hài lòng (hoặc: Kém)"; break;
                            case "4": value = "4 – Hài lòng (hoặc: Tốt)"; break;
                            case "5": value = "5 – Rất hài lòng (hoặc: Rất tốt)"; break;
                        }
                        worksheet.Cell(row, answerCol + 1).Value = value;
                    }
                }
            }

            var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;
            return stream;
        }

        public MemoryStream ExportSurveyResponsesToExcelCustom(int surveyId, DateTime? fromDate = null, DateTime? toDate = null)
        {
            var survey = _context.Surveys.Include(s => s.Department).FirstOrDefault(s => s.Id == surveyId);
            string surveyTitle = survey?.Title ?? $"Survey_{surveyId}";
            string departmentText = survey?.Department?.Name ?? "";
            string timeText = survey != null ? $"Thời gian: {survey.StartDate:dd/MM/yyyy} - {survey.EndDate:dd/MM/yyyy}" : "";

            // Lấy dữ liệu từ SQL
            var dt = GetSurveyResponsesDataTable(surveyId);

            // Xác định cột rating
            int ratingColIndex = -1;
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                if (dt.Columns[i].ColumnName.Trim().ToLower().Contains("rating"))
                {
                    ratingColIndex = i;
                    break;
                }
            }

            // Render Excel
            var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("SurveyResponses");
            int colCount = dt.Columns.Count;
            worksheet.Cell(1, 1).Value = surveyTitle;
            worksheet.Range(1, 1, 1, colCount).Merge().Style.Font.Bold = true;
            worksheet.Range(1, 1, 1, colCount).Style.Font.FontName = "Arial";
            worksheet.Range(1, 1, 1, colCount).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(2, 1).Value = timeText;
            worksheet.Range(2, 1, 2, colCount).Merge();
            worksheet.Range(2, 1, 2, colCount).Style.Font.FontName = "Arial";
            worksheet.Range(2, 1, 2, colCount).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(3, 1).Value = string.IsNullOrWhiteSpace(departmentText) ? "" : $"Phạm vi khảo sát: {departmentText}";
            worksheet.Range(3, 1, 3, colCount).Merge();
            worksheet.Range(3, 1, 3, colCount).Style.Font.FontName = "Arial";
            worksheet.Range(3, 1, 3, colCount).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

            // Header
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                worksheet.Cell(4, i + 1).Value = dt.Columns[i].ColumnName;
                worksheet.Cell(4, i + 1).Style.Font.Bold = true;
                worksheet.Cell(4, i + 1).Style.Font.FontName = "Arial";
                worksheet.Cell(4, i + 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            }

            // Dữ liệu
            for (int r = 0; r < dt.Rows.Count; r++)
            {
                for (int c = 0; c < dt.Columns.Count; c++)
                {
                    var value = dt.Rows[r][c]?.ToString() ?? "";
                    // Nếu là cột rating thì chuyển đổi sang dạng mô tả
                    if (c == ratingColIndex && !string.IsNullOrEmpty(value))
                    {
                        var v = value.Split('/')[0].Trim();
                        switch (v)
                        {
                            case "1": value = "1 sao - Không sử dụng"; break;
                            case "2": value = "2 sao - Rất không hài lòng (hoặc: Rất kém)"; break;
                            case "3": value = "3 sao - Không hài lòng (hoặc: Kém)"; break;
                            case "4": value = "4 sao - Hài lòng (hoặc: Tốt)"; break;
                            case "5": value = "5 sao - Rất hài lòng (hoặc: Rất tốt)"; break;
                            default:
                                if (int.TryParse(v, out int num) && num > 5)
                                    value = $"{num} sao";
                                break;
                        }
                    }
                    worksheet.Cell(r + 5, c + 1).Value = value;
                    worksheet.Cell(r + 5, c + 1).Style.Font.FontName = "Arial";
                    worksheet.Cell(r + 5, c + 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                }
            }
            worksheet.Columns().AdjustToContents();
            worksheet.Columns().Style.Alignment.WrapText = true;
            int dateColIndex = dt.Columns["Ngày gửi"] != null ? dt.Columns["Ngày gửi"].Ordinal + 1 : 5;
            worksheet.Column(dateColIndex).Width = 22;
            var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;
            return stream;
        }

        private DataTable GetSurveyResponsesDataTable(int surveyId)
        {
            // Query SQL thuần, có thể thay bằng stored procedure nếu muốn pivot
            string sql = @"
                SELECT 
                    r.FullName AS [Họ tên],
                    r.Position AS [Chức vụ],
                    r.PhoneNumber AS [Số điện thoại],
                    r.CompanyName AS [Đơn vị/Công ty],
                    r.SubmittedAt AS [Ngày gửi],
                    q.Content AS [Câu hỏi],
                    COALESCE(a.AnswerContent, a.TextAnswer, o.Content) AS [Trả lời]
                FROM Responses r
                INNER JOIN Answers a ON a.ResponseId = r.Id
                LEFT JOIN Questions q ON q.Id = ISNULL(a.QuestionId, a.QuestionIdBackup)
                LEFT JOIN Options o ON o.Id = a.OptionIdBackup
                WHERE r.SurveyId = @SurveyId
                ORDER BY r.SubmittedAt, q.Id";

            var dt = new DataTable();
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand(sql, conn))
            using (var da = new SqlDataAdapter(cmd))
            {
                cmd.Parameters.AddWithValue("@SurveyId", surveyId);
                da.Fill(dt);
            }
            return dt;
        }
    }
}
