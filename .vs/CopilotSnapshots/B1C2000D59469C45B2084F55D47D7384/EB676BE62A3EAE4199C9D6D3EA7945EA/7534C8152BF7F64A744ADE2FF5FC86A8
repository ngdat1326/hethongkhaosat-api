using api.Data;
using api.DTOs.QuestionBranch;
using api.Interfaces.IRepositories;
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Repositories
{
    public class QuestionBranchRepository : IQuestionBranchRepository
    {
        private readonly ApplicationDbContext _context;
        public QuestionBranchRepository(ApplicationDbContext context)
        {
            _context = context;
        }
        public async Task<IEnumerable<QuestionBranchDto>> GetAllAsync()
        {
            return await _context.QuestionBranches
                .Include(qb => qb.BranchOptions)
                .Select(qb => new QuestionBranchDto
                {
                    Id = qb.Id,
                    CurrentQuestionId = qb.CurrentQuestionId,
                    NextQuestionId = qb.NextQuestionId,
                    ConditionType = qb.ConditionType,
                    OptionIds = qb.BranchOptions.Select(bo => bo.OptionId).ToList()
                }).ToListAsync();
        }
        public async Task<QuestionBranchDto?> GetByIdAsync(int id)
        {
            var qb = await _context.QuestionBranches
                .Include(qb => qb.BranchOptions)
                .FirstOrDefaultAsync(qb => qb.Id == id);
            if (qb == null) return null;
            return new QuestionBranchDto
            {
                Id = qb.Id,
                CurrentQuestionId = qb.CurrentQuestionId,
                NextQuestionId = qb.NextQuestionId,
                ConditionType = qb.ConditionType,
                OptionIds = qb.BranchOptions.Select(bo => bo.OptionId).ToList()
            };
        }
        public async Task<QuestionBranchDto> CreateAsync(CreateQuestionBranchDto dto)
        {
            var qb = new QuestionBranch
            {
                CurrentQuestionId = dto.CurrentQuestionId,
                NextQuestionId = dto.NextQuestionId,
                ConditionType = dto.ConditionType
            };
            _context.QuestionBranches.Add(qb);
            await _context.SaveChangesAsync();
            // Add branch options
            foreach (var optionId in dto.OptionIds)
            {
                _context.QuestionBranchOptions.Add(new QuestionBranchOption
                {
                    QuestionBranchId = qb.Id,
                    OptionId = optionId
                });
            }
            await _context.SaveChangesAsync();
            return new QuestionBranchDto
            {
                Id = qb.Id,
                CurrentQuestionId = qb.CurrentQuestionId,
                NextQuestionId = qb.NextQuestionId,
                ConditionType = qb.ConditionType,
                OptionIds = dto.OptionIds
            };
        }
        public async Task<QuestionBranchDto?> UpdateAsync(int id, UpdateQuestionBranchDto dto)
        {
            var qb = await _context.QuestionBranches
                .Include(qb => qb.BranchOptions)
                .FirstOrDefaultAsync(qb => qb.Id == id);
            if (qb == null) return null;
            qb.CurrentQuestionId = dto.CurrentQuestionId ?? qb.CurrentQuestionId;
            qb.NextQuestionId = dto.NextQuestionId ?? qb.NextQuestionId;
            qb.ConditionType = dto.ConditionType ?? qb.ConditionType;
            if (dto.OptionIds != null)
            {
                // Remove old options
                _context.QuestionBranchOptions.RemoveRange(qb.BranchOptions);
                // Add new options
                foreach (var optionId in dto.OptionIds)
                {
                    _context.QuestionBranchOptions.Add(new QuestionBranchOption
                    {
                        QuestionBranchId = qb.Id,
                        OptionId = optionId
                    });
                }
            }
            await _context.SaveChangesAsync();
            return new QuestionBranchDto
            {
                Id = qb.Id,
                CurrentQuestionId = qb.CurrentQuestionId,
                NextQuestionId = qb.NextQuestionId,
                ConditionType = qb.ConditionType,
                OptionIds = dto.OptionIds ?? qb.BranchOptions.Select(bo => bo.OptionId).ToList()
            };
        }
        public async Task<bool> DeleteAsync(int id)
        {
            var qb = await _context.QuestionBranches
                .Include(qb => qb.BranchOptions)
                .FirstOrDefaultAsync(qb => qb.Id == id);
            if (qb == null) return false;
            _context.QuestionBranchOptions.RemoveRange(qb.BranchOptions);
            _context.QuestionBranches.Remove(qb);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}
