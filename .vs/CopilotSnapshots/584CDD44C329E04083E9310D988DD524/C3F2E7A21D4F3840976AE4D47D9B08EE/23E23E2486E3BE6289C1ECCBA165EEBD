using api.Data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Linq;

namespace api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin,User")]
    public class DashboardController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        public DashboardController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet("summary")]
        public IActionResult GetDashboardSummary()
        {
            var activeSurveyIds = _context.Surveys
                .Where(s => s.Status == 1)
                .Select(s => s.Id)
                .ToList();

            var totalSurveys = activeSurveyIds.Count;
            var totalResponses = _context.Responses.Count(r => activeSurveyIds.Contains(r.SurveyId));
            var today = DateTime.Today;
            var responsesToday = _context.Responses.Count(r => activeSurveyIds.Contains(r.SurveyId) && r.SubmittedAt.Date == today);

            return Ok(new
            {
                totalSurveys,
                totalResponses,
                responsesToday
            });
        }

        [HttpGet("survey-count/{surveyId}")]
        public IActionResult GetSurveyCount(int surveyId)
        {
            var survey = _context.Surveys.FirstOrDefault(s => s.Id == surveyId && s.Status == 1);
            if (survey == null)
                return NotFound(new { error = "Survey not found or not active" });

            var questionCount = _context.Questions.Count(q => q.SurveyId == surveyId);
            var responseCount = _context.Responses.Count(r => r.SurveyId == surveyId);

            return Ok(new
            {
                surveyId = survey.Id,
                questionCount,
                responseCount
            });
        }
    }
}
