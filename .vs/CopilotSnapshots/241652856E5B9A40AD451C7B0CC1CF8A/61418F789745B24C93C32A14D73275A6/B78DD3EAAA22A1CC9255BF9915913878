using api.Data;
using api.DTOs.Question;
using api.Interfaces.IRepositories;
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Repositories
{
    public class QuestionRepository : IQuestionRepository
    {
        private readonly ApplicationDbContext _context;
        public QuestionRepository(ApplicationDbContext context)
        {
            _context = context;
        }
        public async Task<IEnumerable<QuestionDto>> GetAllAsync()
        {
            return await _context.Questions.Select(q => new QuestionDto
            {
                Id = q.Id,
                SurveyId = q.SurveyId,
                Content = q.Content,
                QuestionTypeId = q.QuestionTypeId,
                Order = q.Order,
                IsRequired = q.IsRequired
            }).ToListAsync();
        }
        public async Task<QuestionDto?> GetByIdAsync(int id)
        {
            var q = await _context.Questions.FindAsync(id);
            if (q == null) return null;
            return new QuestionDto
            {
                Id = q.Id,
                SurveyId = q.SurveyId,
                Content = q.Content,
                QuestionTypeId = q.QuestionTypeId,
                Order = q.Order,
                IsRequired = q.IsRequired
            };
        }
        public async Task<QuestionDto> CreateAsync(CreateQuestionDto dto)
        {
            var q = new Question
            {
                SurveyId = dto.SurveyId,
                Content = dto.Content,
                QuestionTypeId = dto.QuestionTypeId,
                Order = dto.Order,
                IsRequired = dto.IsRequired
            };
            _context.Questions.Add(q);
            await _context.SaveChangesAsync();
            return new QuestionDto
            {
                Id = q.Id,
                SurveyId = q.SurveyId,
                Content = q.Content,
                QuestionTypeId = q.QuestionTypeId,
                Order = q.Order,
                IsRequired = q.IsRequired
            };
        }
        public async Task<QuestionDto?> UpdateAsync(int id, UpdateQuestionDto dto)
        {
            var q = await _context.Questions.FindAsync(id);
            if (q == null) return null;
            q.Content = dto.Content ?? q.Content;
            q.QuestionTypeId = dto.QuestionTypeId ?? q.QuestionTypeId;
            q.Order = dto.Order ?? q.Order;
            q.IsRequired = dto.IsRequired ?? q.IsRequired;
            await _context.SaveChangesAsync();
            return new QuestionDto
            {
                Id = q.Id,
                SurveyId = q.SurveyId,
                Content = q.Content,
                QuestionTypeId = q.QuestionTypeId,
                Order = q.Order,
                IsRequired = q.IsRequired
            };
        }
        public async Task<bool> DeleteAsync(int id)
        {
            var q = await _context.Questions.FindAsync(id);
            if (q == null) return false;
            _context.Questions.Remove(q);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}
