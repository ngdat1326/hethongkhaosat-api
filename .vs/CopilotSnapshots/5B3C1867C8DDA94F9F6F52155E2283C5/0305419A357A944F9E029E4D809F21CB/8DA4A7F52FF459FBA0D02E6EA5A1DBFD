using api.Data;
using System;
using System.Data;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using ClosedXML.Excel;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using api.Models;

namespace api.Report
{
    public class SurveyExcelExporter
    {
        private readonly ApplicationDbContext _context;
        private readonly string _connectionString;

        public SurveyExcelExporter(ApplicationDbContext context)
        {
            _context = context;
            _connectionString = _context.Database.GetDbConnection().ConnectionString;
        }

        public MemoryStream ExportSurveyResponsesToExcel(int surveyId)
        {
            // 1. Lấy dữ liệu từ SQL (có thể là pivot hoặc query thẳng)
            var dt = GetSurveyResponsesDataTable(surveyId);

            // 2. Tạo Excel
            var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("SurveyResponses");

            // 3. Đổ DataTable vào Excel
            worksheet.Cell(1, 1).InsertTable(dt, "Responses", true);

            // 4. Format cơ bản
            worksheet.Columns().AdjustToContents();
            worksheet.RangeUsed().Style.Font.FontName = "Arial";
            worksheet.Row(1).Style.Font.Bold = true;
            worksheet.Row(1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

            // Wrap text & chỉnh width cho cột "Ngày gửi"
            worksheet.Columns().Style.Alignment.WrapText = true;
            int dateColIndex = dt.Columns["Ngày gửi"] != null ? dt.Columns["Ngày gửi"].Ordinal + 1 : 2;
            worksheet.Column(dateColIndex).Width = 22;

            var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;
            return stream;
        }

        public MemoryStream ExportSurveyResponsesToExcelCustom(int surveyId, DateTime? fromDate = null, DateTime? toDate = null)
        {
            // Lấy thông tin khảo sát (EF Core)
            var survey = _context.Surveys.Include(s => s.Department).FirstOrDefault(s => s.Id == surveyId);
            string surveyTitle = survey?.Title ?? $"Survey_{surveyId}";
            string departmentText = survey?.Department?.Name ?? "";
            string timeText = survey != null ? $"Thời gian: {survey.StartDate:dd/MM/yyyy} - {survey.EndDate:dd/MM/yyyy}" : "";

            // Lấy các phản hồi theo thời gian (SQL thuần)
            var responses = new List<dynamic>();
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand(@"SELECT Id, RespondentId, SubmittedAt FROM Responses WHERE SurveyId = @SurveyId" +
                (fromDate.HasValue ? " AND SubmittedAt >= @FromDate" : "") +
                (toDate.HasValue ? " AND SubmittedAt <= @ToDate" : "") +
                " ORDER BY SubmittedAt", conn))
            {
                cmd.Parameters.AddWithValue("@SurveyId", surveyId);
                if (fromDate.HasValue) cmd.Parameters.AddWithValue("@FromDate", fromDate.Value);
                if (toDate.HasValue) cmd.Parameters.AddWithValue("@ToDate", toDate.Value);
                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        responses.Add(new {
                            Id = (int)reader["Id"],
                            RespondentId = reader["RespondentId"]?.ToString(),
                            SubmittedAt = (DateTime)reader["SubmittedAt"]
                        });
                    }
                }
            }
            var responseIds = responses.Select(r => (int)r.Id).ToList();
            if (responseIds.Count == 0) responseIds.Add(0); // Đảm bảo luôn có giá trị trong IN (...)

            // Lấy các câu hỏi có ít nhất 1 câu trả lời (SQL thuần)
            var questions = new List<Question>();
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand(@$"SELECT DISTINCT q.Id, q.Content, q.[Order] FROM Questions q JOIN Answers a ON (a.QuestionId = q.Id OR a.QuestionIdBackup = q.Id) WHERE q.SurveyId = @SurveyId AND a.ResponseId IN ({string.Join(",", responseIds)}) ORDER BY q.[Order]", conn))
            {
                cmd.Parameters.AddWithValue("@SurveyId", surveyId);
                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        questions.Add(new Question {
                            Id = (int)reader["Id"],
                            Content = reader["Content"].ToString() ?? "",
                            Order = (int)reader["Order"]
                        });
                    }
                }
            }

            // Lấy tất cả answer cho các responseId này (SQL thuần)
            var answers = new List<Answer>();
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand($"SELECT Id, ResponseId, QuestionId, QuestionIdBackup, AnswerContent, TextAnswer, ExtraOptionIdsBackup, OptionIdBackup FROM Answers WHERE ResponseId IN ({string.Join(",", responseIds)})", conn))
            {
                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        answers.Add(new Answer {
                            Id = (int)reader["Id"],
                            ResponseId = (int)reader["ResponseId"],
                            QuestionId = reader["QuestionId"] as int?,
                            QuestionIdBackup = reader["QuestionIdBackup"] as int?,
                            AnswerContent = reader["AnswerContent"]?.ToString(),
                            TextAnswer = reader["TextAnswer"]?.ToString(),
                            ExtraOptionIdsBackup = reader["ExtraOptionIdsBackup"]?.ToString(),
                            OptionIdBackup = reader["OptionIdBackup"] as int?
                        });
                    }
                }
            }

            // Lấy options (EF Core)
            var options = _context.Options.ToList();

            // Lấy danh sách responses từ EF Core để lấy thông tin chung
            var responseEntities = _context.Responses.Where(r => responseIds.Contains(r.Id)).ToList();

            // Render Excel
            var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("SurveyResponses");
            int colCount = questions.Count + 5; // 4 thông tin + ngày gửi + các câu hỏi
            worksheet.Cell(1, 1).Value = surveyTitle;
            worksheet.Range(1, 1, 1, colCount).Merge().Style.Font.Bold = true;
            worksheet.Range(1, 1, 1, colCount).Style.Font.FontName = "Arial";
            worksheet.Range(1, 1, 1, colCount).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(2, 1).Value = timeText;
            worksheet.Range(2, 1, 2, colCount).Merge();
            worksheet.Range(2, 1, 2, colCount).Style.Font.FontName = "Arial";
            worksheet.Range(2, 1, 2, colCount).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(3, 1).Value = string.IsNullOrWhiteSpace(departmentText) ? "" : $"Phạm vi khảo sát: {departmentText}";
            worksheet.Range(3, 1, 3, colCount).Merge();
            worksheet.Range(3, 1, 3, colCount).Style.Font.FontName = "Arial";
            worksheet.Range(3, 1, 3, colCount).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            // Header
            worksheet.Cell(4, 1).Value = "Họ tên";
            worksheet.Cell(4, 2).Value = "Chức vụ";
            worksheet.Cell(4, 3).Value = "Số điện thoại";
            worksheet.Cell(4, 4).Value = "Đơn vị/Công ty";
            worksheet.Cell(4, 5).Value = "Ngày gửi";
            for (int i = 0; i < questions.Count; i++)
            {
                worksheet.Cell(4, i + 6).Value = questions[i].Content;
                worksheet.Cell(4, i + 6).Style.Font.FontName = "Arial";
                worksheet.Cell(4, i + 6).Style.Font.Bold = true;
                worksheet.Cell(4, i + 6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            }
            for (int c = 1; c <= 5; c++)
            {
                worksheet.Cell(4, c).Style.Font.Bold = true;
                worksheet.Cell(4, c).Style.Font.FontName = "Arial";
                worksheet.Cell(4, c).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            }
            int row = 5;
            foreach (var response in responses)
            {
                var respEntity = responseEntities.FirstOrDefault(r => r.Id == (int)response.Id);
                worksheet.Cell(row, 1).Value = respEntity?.FullName ?? "";
                worksheet.Cell(row, 2).Value = respEntity?.Position ?? "";
                worksheet.Cell(row, 3).Value = respEntity?.PhoneNumber ?? "";
                worksheet.Cell(row, 4).Value = respEntity?.CompanyName ?? "";
                worksheet.Cell(row, 5).Value = response.SubmittedAt;
                worksheet.Cell(row, 5).Style.DateFormat.Format = "dd/MM/yyyy HH:mm:ss";
                for (int i = 0; i < questions.Count; i++)
                {
                    var q = questions[i];
                    var answer = answers.FirstOrDefault(a => a.ResponseId == (int)response.Id && (a.QuestionId == q.Id || a.QuestionIdBackup == q.Id));
                    string cellValue = "";
                    if (answer != null)
                    {
                        if (!string.IsNullOrEmpty(answer.AnswerContent))
                            cellValue = answer.AnswerContent;
                        else if (!string.IsNullOrEmpty(answer.TextAnswer))
                            cellValue = answer.TextAnswer;
                        else if (!string.IsNullOrEmpty(answer.ExtraOptionIdsBackup))
                        {
                            var ids = answer.ExtraOptionIdsBackup.Split(',', StringSplitOptions.RemoveEmptyEntries);
                            var optionContents = options.Where(o => ids.Contains(o.Id.ToString())).Select(o => o.Content);
                            cellValue = string.Join(", ", optionContents);
                        }
                        else if (answer.OptionIdBackup.HasValue)
                        {
                            var opt = options.FirstOrDefault(o => o.Id == answer.OptionIdBackup.Value);
                            if (opt != null) cellValue = opt.Content;
                        }
                        // Nếu là câu hỏi rating thì xuất điểm chọn/điểm max
                        var questionType = _context.Questions.Include(x => x.QuestionType).FirstOrDefault(x => x.Id == q.Id)?.QuestionType;
                        if (questionType != null && (questionType.Code.ToLower() == "rating" || questionType.Code.ToLower() == "scale" || questionType.Name.ToLower().Contains("thang điểm") || questionType.Name.ToLower().Contains("rating") || questionType.Name.ToLower().Contains("scale")))
                        {
                            var maxRating = options.Count(o => o.QuestionId == q.Id);
                            if (int.TryParse(cellValue, out int num))
                            {
                                worksheet.Cell(row, i + 6).Value = $"{num}/{maxRating}";
                                worksheet.Cell(row, i + 6).Style.NumberFormat.Format = "@";
                            }
                            else
                            {
                                worksheet.Cell(row, i + 6).Value = cellValue;
                            }
                        }
                        else
                        {
                            worksheet.Cell(row, i + 6).Value = cellValue;
                        }
                        worksheet.Cell(row, i + 6).Style.Font.FontName = "Arial";
                        worksheet.Cell(row, i + 6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    }
                    else
                    {
                        worksheet.Cell(row, i + 6).Value = "";
                        worksheet.Cell(row, i + 6).Style.Font.FontName = "Arial";
                        worksheet.Cell(row, i + 6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    }
                }
                row++;
            }
            worksheet.Columns().AdjustToContents();
            for (int i = 1; i <= colCount; i++)
            {
                worksheet.Column(i).Width = 18;
                worksheet.Column(i).Style.Alignment.WrapText = true;
            }
            worksheet.Column(5).Width = 22;
            var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;
            return stream;
        }

        private DataTable GetSurveyResponsesDataTable(int surveyId)
        {
            // Query SQL thuần, có thể thay bằng stored procedure nếu muốn pivot
            string sql = @"
                SELECT 
                    r.FullName AS [Họ tên],
                    r.Position AS [Chức vụ],
                    r.PhoneNumber AS [Số điện thoại],
                    r.CompanyName AS [Đơn vị/Công ty],
                    r.SubmittedAt AS [Ngày gửi],
                    q.Content AS [Câu hỏi],
                    COALESCE(a.AnswerContent, a.TextAnswer, o.Content) AS [Trả lời]
                FROM Responses r
                INNER JOIN Answers a ON a.ResponseId = r.Id
                LEFT JOIN Questions q ON q.Id = ISNULL(a.QuestionId, a.QuestionIdBackup)
                LEFT JOIN Options o ON o.Id = a.OptionIdBackup
                WHERE r.SurveyId = @SurveyId
                ORDER BY r.SubmittedAt, q.Id";

            var dt = new DataTable();
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand(sql, conn))
            using (var da = new SqlDataAdapter(cmd))
            {
                cmd.Parameters.AddWithValue("@SurveyId", surveyId);
                da.Fill(dt);
            }
            return dt;
        }
    }
}
