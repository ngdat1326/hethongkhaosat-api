using api.Data;
using api.DTOs.Survey;
using Microsoft.EntityFrameworkCore;

namespace api.Services
{
    public class SurveyAnalyticsService
    {
        private readonly ApplicationDbContext _context;
        public SurveyAnalyticsService(ApplicationDbContext context)
        {
            _context = context;
        }

        public List<SurveyAnalyticsQuestionDto> GetSurveyAnalytics(int surveyId)
        {
            var questions = _context.Questions
                .Include(q => q.Options)
                .Include(q => q.QuestionType)
                .Where(q => q.SurveyId == surveyId)
                .OrderBy(q => q.Order)
                .ToList();
            var responses = _context.Responses
                .Where(r => r.SurveyId == surveyId)
                .Select(r => r.Id)
                .ToList();
            var answers = _context.Answers
                .Where(a => responses.Contains(a.ResponseId))
                .ToList();

            var result = new List<SurveyAnalyticsQuestionDto>();
            foreach (var q in questions)
            {
                var qAnswers = answers.Where(a => (a.QuestionId == q.Id || a.QuestionIdBackup == q.Id)).ToList();
                var dto = new SurveyAnalyticsQuestionDto
                {
                    QuestionId = q.Id,
                    QuestionContent = q.Content,
                    Type = q.QuestionType.Code,
                    TotalAnswers = qAnswers.Count
                };
                if (q.QuestionType.Code == "SingleChoice")
                {
                    var options = q.Options?.ToList() ?? new List<api.Models.Option>();
                    var optionStats = new List<SurveyAnalyticsOptionDto>();
                    foreach (var opt in options)
                    {
                        int count = qAnswers.Count(a => a.OptionId == opt.Id || a.OptionIdBackup == opt.Id);
                        double percent = dto.TotalAnswers > 0 ? (count * 100.0 / dto.TotalAnswers) : 0;
                        optionStats.Add(new SurveyAnalyticsOptionDto
                        {
                            OptionId = opt.Id,
                            Content = opt.Content,
                            Count = count,
                            Percent = Math.Round(percent, 2)
                        });
                    }
                    dto.Options = optionStats;
                }
                else if (q.QuestionType.Code == "MultiChoice")
                {
                    var options = q.Options?.ToList() ?? new List<api.Models.Option>();
                    var optionStats = new List<SurveyAnalyticsOptionDto>();
                    foreach (var opt in options)
                    {
                        int count = 0;
                        foreach (var a in qAnswers)
                        {
                            var counted = false;
                            // ??m n?u OptionId ho?c OptionIdBackup trùng option
                            if ((a.OptionId == opt.Id || a.OptionIdBackup == opt.Id) && !counted)
                            {
                                count++;
                                counted = true;
                            }
                            // ??m n?u ExtraOptionIds ch?a option
                            if (!string.IsNullOrWhiteSpace(a.ExtraOptionIds))
                            {
                                var ids = a.ExtraOptionIds.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                                if (ids.Any(x => x == opt.Id.ToString()) && !counted)
                                {
                                    count++;
                                    counted = true;
                                }
                            }
                            // ??m n?u ExtraOptionIdsBackup ch?a option
                            if (!string.IsNullOrWhiteSpace(a.ExtraOptionIdsBackup))
                            {
                                var ids = a.ExtraOptionIdsBackup.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                                if (ids.Any(x => x == opt.Id.ToString()) && !counted)
                                {
                                    count++;
                                    counted = true;
                                }
                            }
                        }
                        double percent = dto.TotalAnswers > 0 ? (count * 100.0 / dto.TotalAnswers) : 0;
                        optionStats.Add(new SurveyAnalyticsOptionDto
                        {
                            OptionId = opt.Id,
                            Content = opt.Content,
                            Count = count,
                            Percent = Math.Round(percent, 2)
                        });
                    }
                    dto.Options = optionStats;
                }
                else if (q.QuestionType.Code == "Rating" || q.QuestionType.Code == "Scale")
                {
                    var ratingCounts = new Dictionary<string, int>();
                    double total = 0;
                    int count = 0;
                    foreach (var a in qAnswers)
                    {
                        if (int.TryParse(a.AnswerContent ?? a.TextAnswer, out int val))
                        {
                            string key = val.ToString();
                            if (!ratingCounts.ContainsKey(key)) ratingCounts[key] = 0;
                            ratingCounts[key]++;
                            total += val;
                            count++;
                        }
                    }
                    dto.Counts = ratingCounts;
                    dto.Average = count > 0 ? Math.Round(total / count, 2) : null;
                }
                else if (q.QuestionType.Code == "Text")
                {
                    dto.Answers = qAnswers
                        .Where(a => !string.IsNullOrWhiteSpace(a.TextAnswer))
                        .Select(a => a.TextAnswer!.Trim())
                        .ToList();
                }
                result.Add(dto);
            }
            return result;
        }
    }
}
