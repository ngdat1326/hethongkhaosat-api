using api.DTOs.Survey;
using api.Models;
using api.Interfaces.IRepositories;
using api.Interfaces.IServices;
using System.Threading.Tasks;
using System.Linq;

namespace api.Services
{
    public class ResponseService : IResponseService
    {
        private readonly IResponseRepository _responseRepo;
        private readonly IAnswerRepository _answerRepo;
        private readonly IQuestionRepository _questionRepo;
        public ResponseService(IResponseRepository responseRepo, IAnswerRepository answerRepo, IQuestionRepository questionRepo)
        {
            _responseRepo = responseRepo;
            _answerRepo = answerRepo;
            _questionRepo = questionRepo;
        }
        public async Task SaveSurveyResultAsync(SubmitSurveyResultDto dto)
        {
            var response = new Response
            {
                SurveyId = dto.SurveyId,
                RespondentId = dto.RespondentId,
                SubmittedAt = DateTime.Now
            };
            response = await _responseRepo.AddResponseAsync(response);
            var questionIds = dto.Answers.Select(a => a.QuestionId).Distinct().ToList();
            var questions = await _questionRepo.GetQuestionsByIdsAsync(questionIds);
            var answers = dto.Answers.Select(ans => {
                var question = questions.FirstOrDefault(q => q.Id == ans.QuestionId);
                return new Answer
                {
                    ResponseId = response.Id,
                    QuestionId = ans.QuestionId,
                    OptionId = ans.OptionId ?? 0, // ép về int, nếu null thì gán 0 (hoặc xử lý logic khác nếu cần)
                    TextAnswer = ans.TextAnswer,
                    ExtraOptionIds = ans.ExtraOptionIds,
                    QuestionContent = question?.Content
                };
            }).ToList();
            await _answerRepo.AddAnswersAsync(answers);
        }
    }
}
