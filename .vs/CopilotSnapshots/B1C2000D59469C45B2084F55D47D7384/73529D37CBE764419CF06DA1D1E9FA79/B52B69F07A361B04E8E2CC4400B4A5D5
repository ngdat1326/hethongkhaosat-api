using api.DTOs.Survey;
using api.Interfaces.IServices;
using Microsoft.AspNetCore.Mvc;
using api.DTOs.QuestionType;
using api.DTOs.Option;
using api.DTOs.QuestionBranch;
using api.Models;
using Microsoft.EntityFrameworkCore;
using api.Data;

namespace api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PublicSurveyController : ControllerBase
    {
        private readonly ISurveyService _surveyService;
        private readonly IQuestionService _questionService;
        private readonly IQuestionTypeService _questionTypeService;
        private readonly IOptionService _optionService;
        private readonly IQuestionBranchService _questionBranchService;
        private readonly ApplicationDbContext _context;
        public PublicSurveyController(
            ISurveyService surveyService,
            IQuestionService questionService,
            IQuestionTypeService questionTypeService,
            IOptionService optionService,
            IQuestionBranchService questionBranchService,
            ApplicationDbContext context)
        {
            _surveyService = surveyService;
            _questionService = questionService;
            _questionTypeService = questionTypeService;
            _optionService = optionService;
            _questionBranchService = questionBranchService;
            _context = context;
        }

        [HttpGet("detail/{surveyId}")]
        public async Task<IActionResult> GetSurveyDetail(int surveyId)
        {
            try
            {
                var survey = await _surveyService.GetByIdAsync(surveyId);
                if (survey == null)
                    return NotFound(new { error = "Survey not found" });
                var questions = (await _questionService.GetAllBySurveyIdAsync(surveyId)).ToList();
                var allTypes = (await _questionTypeService.GetAllAsync()).ToList();
                var allOptions = (await _optionService.GetAllAsync()).ToList();
                var allBranches = (await _questionBranchService.GetAllAsync()).ToList();
                var nextQuestionIds = allBranches.Select(b => b.NextQuestionId).ToHashSet();
                var questionDict = questions.ToDictionary(q => q.Id);
                var typeDict = allTypes.ToDictionary(t => t.Id);
                var optionDict = allOptions.GroupBy(o => o.QuestionId).ToDictionary(g => g.Key, g => g.ToList());
                var branchDict = allBranches.GroupBy(b => b.CurrentQuestionId).ToDictionary(g => g.Key, g => g.ToList());
                // Build tree recursively
                QuestionTreeNodeDto? BuildTree(int questionId)
                {
                    if (!questionDict.TryGetValue(questionId, out var q)) return null;
                    var node = new QuestionTreeNodeDto
                    {
                        Id = q.Id,
                        Content = q.Content,
                        Order = q.Order,
                        IsRequired = q.IsRequired,
                        QuestionType = typeDict[q.QuestionTypeId],
                        Options = new List<OptionTreeNodeDto>()
                    };
                    if (optionDict.TryGetValue(q.Id, out var options))
                    {
                        foreach (var opt in options)
                        {
                            int? nextQid = null;
                            if (branchDict.TryGetValue(q.Id, out var branches))
                            {
                                var branch = branches.FirstOrDefault(b => b.OptionIds.Contains(opt.Id));
                                nextQid = branch?.NextQuestionId;
                            }
                            node.Options.Add(new OptionTreeNodeDto
                            {
                                Id = opt.Id,
                                QuestionId = opt.QuestionId,
                                Content = opt.Content,
                                Value = opt.Value,
                                NextQuestion = nextQid.HasValue ? BuildTree(nextQid.Value) : null
                            });
                        }
                    }
                    return node;
                }
                var rootQuestionIds = questions.Where(q => !nextQuestionIds.Contains(q.Id)).OrderBy(q => q.Order).Select(q => q.Id).ToList();
                var rootQuestions = new List<QuestionTreeNodeDto>();
                foreach (var rootId in rootQuestionIds)
                {
                    var rootNode = BuildTree(rootId);
                    if (rootNode != null)
                        rootQuestions.Add(rootNode);
                }
                var result = new PublicSurveyTreeDetailDto
                {
                    Survey = survey,
                    RootQuestions = rootQuestions
                };
                return Ok(result);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ERROR] {ex}");
                return StatusCode(500, new { error = "Internal server error", detail = ex.Message });
            }
        }

        [HttpPost("submit")]
        public async Task<IActionResult> SubmitSurvey([FromBody] SubmitSurveyResultDto dto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);
            var survey = await _context.Surveys.FindAsync(dto.SurveyId);
            if (survey == null)
                return NotFound(new { error = "Survey not found" });
            var response = new Response
            {
                SurveyId = dto.SurveyId,
                RespondentId = dto.RespondentId,
                SubmittedAt = DateTime.Now
            };
            _context.Responses.Add(response);
            await _context.SaveChangesAsync();
            foreach (var ans in dto.Answers)
            {
                var answer = new Answer
                {
                    ResponseId = response.Id,
                    QuestionId = ans.QuestionId,
                    OptionId = ans.OptionId,
                    TextAnswer = ans.TextAnswer,
                    ExtraOptionIds = ans.ExtraOptionIds
                };
                _context.Answers.Add(answer);
            }
            await _context.SaveChangesAsync();
            return Ok(new { message = "Survey submitted successfully" });
        }
    }
}
